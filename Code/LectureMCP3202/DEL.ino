/*
@file   DEL.ino
@author Mohammad Barin Wahidi, Jessy-Grimard Maheu, 
        Marc-√âtienne Gendron-Fontaine et Zachary Poulin
@date   12 d√©cembre 2022
@brief  Programme qui permet d'appeler les fonctions de DEL, changer les couleurs
        des DEL et choisir les fonctionnalit√©s des boutons de la manette (fonctions
        pour contr√¥ler le robot ou les DEL).

  ============================================
  == Fonctions pour contr√¥ler les DELs      ==
  ============================================
  blinkz();             Fait clignoter les DELs
  flash();              Fait flasher les DELS
  charniere();          Tentative de quelque chose d'ind√©fini ¬Ø\_(„ÉÑ)_/¬Ø
  barin();              Fait tourner les DELs
  jgmDashDEL(compteur); Dels arc-en-ciel üòé (la plus cool)

  == Fonctions pour contr√¥ler le robot NAO  ==
  NAO_crouch();           NAO s'accroupit
  NAO_lyingBelly();       NAO se couche sur son ventre
  NAO_monster();          NAO fait l'animation de monstre
  NAO_pong();             NAO fait l'animation du jeu de pong üéÆ
  NAO_sit();              NAO s'assoit
  NAO_sitRelax();         NAO s'assoit de fa√ßon relax
  NAO_talk("Hello", 50);  NAO dit le message (message √† dire, volume du message)
*/


// Fonction pour g√®rer les DELs, elle est appel√© √† environ chaque 10 ms
void delXD(int compteur)
{
  //Changer la couleur ici
  //https://www.w3schools.com/colors/colors_names.asp
  //Couleur Black = √©teint
  couleur[0]= CRGB::AliceBlue;
  couleur[1]= CRGB::Green;
  couleur[2]= CRGB::YellowGreen;
  couleur[3]= CRGB::Black;

  jgmDashDEL(compteur);
  // blinkz();
  // flash();
  // charniere();
  // barin();
}

// fonction du bouton A (bouton de gauche)
void buttonA(int compteur)
{
  // NAO_pong();
  NAO_crouch();
}

// fonction du bouton B (bouton de droite)
void buttonB(int compteur)
{
  // NAO_monster();
  NAO_talk("Barin the banana", 60);
  // NAO_crouch();
}

// fonction pour faire clignoter les DEL (fait par ZACHARY)
void blinkz()
{
  Time = millis();  // variable pour compter le temps √©coul√© en ms
  if(Time - oldTime >= INTERVAL)   // si l'intervalle s'est √©coul√©
  {
    if(ledState == LOW) // si ledState est √† LOW
    {
      for( int i = 0; i < NUM_LEDS; ++i) // boucle √† travers les DEL
      {
        leds[i] = couleur[i]; // assigne la couleur choisie plus haut √† la DEL
        FastLED.show(); // montre la couleur sur la DEL
      }
      ledState = HIGH;  // met ledState √† HIGH
    }
    else if(ledState == HIGH) // si ledState est √† HIGH
    {
      for( int i = 0; i < NUM_LEDS; ++i) // boucle √† travers les DEL
      {
        leds[i] = CRGB::Black;  // met la couleur Black (√©teinte) √† la DEL
        FastLED.show(); // montre la DEL √©teinte
      }
      ledState = LOW; // met ledState √† HIGH
    }
    oldTime = Time; // le temps actuel devient l'ancien temps pour la prochaine fois
  }
}

// fonction pour faire clignoter les DEL en groupe de 2 (pair, impair)
void flash()
{
  Time = millis();  // variable pour compter le temps √©coul√© en ms
  if(Time - oldTime >= INTERVAL)  // si l'intervalle s'est √©coul√©
  {
    if(ledState == LOW) // si ledState est √† LOW
    {
        for(int i=0; i<NUM_LEDS; i++) // boucle √† travers les DEL
        {
            if(i%2==0)  // allume les DEL paires
                leds[i] = couleur[i];
            else        // √©teint les DEL impaires
                leds[i] = CRGB::Black;FastLED.setBrightness(  BRIGHTNESS );
        }
    }
    else        // si ledState est √† HIGH
    {
        for(int i=0; i<NUM_LEDS; i++) // boucle √† travers les DEL
        {
            if(i%2==0)  // √©teint les DEL paires
                leds[i] = CRGB::Black;
            else        // allume les DEL impaires
                leds[i] = couleur[i];
            FastLED.show(); // montre la couleur sur la DEL
            ledState = LOW; // met ledState √† LOW
        }
    }
    oldTime = Time; // le temps actuel devient l'ancien temps pour la prochaine fois
  }
}

/*
 * brief :  Fonction qui fait allumer, en premier, les DEL
 *          2 et 4 tendis que les DEL 1 et 3 sont √©teinte.
 *          Puis, apr√®s un delay de temps X, les DEL 2 et
 *          4 s'√©teignent et les DEL 1 et 3 s'allume. Les
 *          couleur des DEL peuvent varier.
 * param :  RIEN!
 (fait par MARC-√âTIENNE)
 */
void charniere()
{
    // Garde le temps depuis le
    // d√©part du programme.
    Time = millis();

    // Quand le delay est pass√©
    if(Time - oldTime >= INTERVAL)
    {
        // Si "ledState" est √† l'√©tat "LOW",
        // les DEL 2 et 4 s'allume tandisque
        // les DEL 1 et 3 sont √©teinte. Sinon,
        // les DEL 2 et 4 sont √©teinte et les
        // DEL 1 et 3 sont allum√©es. "ledState"
        // varrie de "HIGH" √† "LOW". Ce qui
        // donne un effet de clignotement des
        // DEL paires et impaires.
        if(ledState == LOW)
        {
            for(int i=0; i<NUM_LEDS; i++)
            {
                for(int j=0; j<NUM_LEDS; j++)
                {
                    if(j%2==0)
                        leds[j] = couleur[i];
                    else                  
                        leds[j] = CRGB::Black; 
                    FastLED.show();
                    ledState = HIGH;
                }
            }
        }
        else
        {
            for(int i=0; i<NUM_LEDS; i++)
            {
                for(int j=0; j<NUM_LEDS; j++)
                {
                    if(j%2==0)
                        leds[j] = CRGB::Black;                    
                    else
                        leds[j] = couleur[i];
                    FastLED.show();
                    ledState = HIGH;
                }
            }
        }
        oldTime = Time;
    }
}

// fonction pour faire tourner les DEL (fait par BARIN)
void barin()
{
  Time = millis();  // variable pour compter le temps √©coul√© en ms
  if(Time - oldTime >= INTERVAL)  // si l'intervalle s'est √©coul√©
  {
    if(ledState == LOW) // si ledState est √† LOW
    {
      // on met les couleurs choisies plus haut dans le tableau de DEL
      leds[0] = couleur[0];
      leds[1] = couleur[1];
      leds[2] = couleur[2];
      leds[3] = couleur[3];
      ledState = HIGH;  // met ledState √† HIGH
    }
    else if(ledState == HIGH) // si ledState est √† HIGH
    {
      CRGB temp = leds[0];  // on met la couleur de la premi√®re DEL dans une variable temporaire
      for(int i = 0; i < 3; ++i)  // boucle √† travers les DEL
      {
        leds[i] = leds[i+1];  // chaque DEL prend la couleur de la DEL suivante
      }
      leds[3] = temp; // ola derni√®re DEL prend la couleur de la premi√®re DEL
      FastLED.show(); // montre les couleurs sur les DEL
    }
    oldTime = Time; // le temps actuel devient l'ancien temps pour la prochaine fois
  }
}

// fonction pour allumer les DEL avec les couleurs de l'arc-en-ciel (fait par JESSY)
void jgmDashDEL(int compteur)
{
  for( int i = 0; i < NUM_LEDS; ++i) // boucle √† travers les DEL
    {
        leds[i] = ColorFromPalette( RainbowColors_p, compteur, BRIGHTNESS, LINEARBLEND);
        //colorIndex += 3;
    }
    FastLED.show(); // montre les couleurs sur les DEL
}
